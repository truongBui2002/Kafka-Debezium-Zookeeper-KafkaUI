apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
        - name: init-kafka
          image: {{ .Values.kafka.image }}
          command: ['sh', '-c', 'mkdir -p /bitnami/kafka && chown -R 1001:1001 /bitnami/kafka/* && chmod -R 775 /bitnami/kafka']
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
      containers:
        - name: kafka
          image: {{ .Values.kafka.image }}
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_BROKER_ID
              value: "{{ .Values.kafka.config.brokerId }}"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ .Values.kafka.config.zookeeperConnect }}"
            - name: KAFKA_LISTENERS
              value: "{{ .Values.kafka.config.listeners }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "{{ .Values.kafka.config.advertisedListeners }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "{{ .Values.kafka.config.listenerSecurityProtocolMap }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.kafka.config.offsetsTopicReplicationFactor }}"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.kafka.config.autoCreateTopicsEnable }}"
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data-pvc